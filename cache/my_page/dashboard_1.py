import streamlit as st
import pandas as pd
import time
import random
from datetime import datetime, timedelta
import os
import logging

from core.session_manager import get_session_value, set_session_value


# G√©n√©ration de donn√©es fictives pour le dashboard
def generate_mock_data():
    """
    G√©n√®re des donn√©es fictives pour le dashboard.
    Utilise un seed bas√© sur la date pour g√©n√©rer des donn√©es coh√©rentes
    mais qui √©voluent chaque jour.
    """
    # Seed bas√© sur la date (change chaque jour)
    today = datetime.now().date()
    seed = int(today.strftime("%Y%m%d"))
    random.seed(seed)

    # Date de d√©but (30 jours en arri√®re)
    start_date = today - timedelta(days=30)

    # Cr√©ation des dates
    dates = [start_date + timedelta(days=i) for i in range(31)]

    # G√©n√©ration des m√©triques
    transcription_counts = [random.randint(5, 20) for _ in range(31)]
    youtube_extractions = [random.randint(3, 15) for _ in range(31)]
    video_extractions = [random.randint(2, 10) for _ in range(31)]
    tts_generations = [random.randint(1, 8) for _ in range(31)]

    # Ajout d'une tendance (croissance progressive)
    for i in range(1, 31):
        growth_factor = 1 + (i / 100)
        transcription_counts[i] = int(transcription_counts[i - 1] * growth_factor)
        youtube_extractions[i] = int(youtube_extractions[i - 1] * (1 + (i / 150)))
        video_extractions[i] = int(video_extractions[i - 1] * (1 + (i / 200)))
        tts_generations[i] = int(tts_generations[i - 1] * (1 + (i / 180)))

    # Cr√©ation du DataFrame
    df = pd.DataFrame({
        'date': dates,
        'transcriptions': transcription_counts,
        'youtube_extractions': youtube_extractions,
        'video_extractions': video_extractions,
        'tts_generations': tts_generations
    })

    return df


def get_usage_metrics():
    """
    R√©cup√®re les m√©triques d'utilisation.
    Utilise des donn√©es fictives pour l'exemple.
    Dans une application r√©elle, ces donn√©es viendraient d'une base de donn√©es.
    """
    # Dans une application r√©elle, on pourrait r√©cup√©rer ces informations
    # depuis une base de donn√©es ou un service d'analytics

    # Pour cet exemple, on g√©n√®re des donn√©es fictives
    return generate_mock_data()


def calculate_summary_metrics(df):
    """
    Calcule les m√©triques r√©sum√©es √† partir du DataFrame.

    Args:
        df: DataFrame contenant les m√©triques journali√®res

    Returns:
        Dictionnaire des m√©triques r√©sum√©es
    """
    # Derniers 7 jours
    last_7_days = df.iloc[-7:]

    # Sommes des 7 derniers jours
    recent_sum = {
        'transcriptions': last_7_days['transcriptions'].sum(),
        'youtube_extractions': last_7_days['youtube_extractions'].sum(),
        'video_extractions': last_7_days['video_extractions'].sum(),
        'tts_generations': last_7_days['tts_generations'].sum()
    }

    # Moyennes des 7 derniers jours
    recent_avg = {
        'transcriptions': round(last_7_days['transcriptions'].mean(), 1),
        'youtube_extractions': round(last_7_days['youtube_extractions'].mean(), 1),
        'video_extractions': round(last_7_days['video_extractions'].mean(), 1),
        'tts_generations': round(last_7_days['tts_generations'].mean(), 1)
    }

    # Calcul des tendances (pourcentage de croissance)
    previous_7_days = df.iloc[-14:-7]

    trends = {}
    for metric in ['transcriptions', 'youtube_extractions', 'video_extractions', 'tts_generations']:
        recent_total = last_7_days[metric].sum()
        previous_total = previous_7_days[metric].sum()

        if previous_total > 0:
            trend_pct = ((recent_total - previous_total) / previous_total) * 100
            trends[metric] = round(trend_pct, 1)
        else:
            trends[metric] = 100.0  # Si pr√©c√©dent est 0, on consid√®re croissance de 100%

    return {
        'recent_sum': recent_sum,
        'recent_avg': recent_avg,
        'trends': trends
    }


def format_trend(value):
    """
    Formate une valeur de tendance avec fl√®che et couleur.

    Args:
        value: Pourcentage de tendance

    Returns:
        Texte format√© en HTML avec fl√®che et couleur
    """
    if value > 0:
        return f"<span style='color:green'>‚ñ≤ {value}%</span>"
    elif value < 0:
        return f"<span style='color:red'>‚ñº {abs(value)}%</span>"
    else:
        return f"<span style='color:gray'>‚ñ∫ {value}%</span>"


def afficher_page_1():
    st.title("üéõÔ∏è Dashboard")

    # Charger les donn√©es d'utilisation
    with st.spinner("Chargement des donn√©es..."):
        usage_data = get_usage_metrics()
        summary = calculate_summary_metrics(usage_data)

    # Carte des m√©triques principales
    st.subheader("üìä Activit√© des 7 derniers jours")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(
            "Transcriptions",
            value=summary['recent_sum']['transcriptions'],
            delta=f"{summary['trends']['transcriptions']}%"
        )

    with col2:
        st.metric(
            "YouTube",
            value=summary['recent_sum']['youtube_extractions'],
            delta=f"{summary['trends']['youtube_extractions']}%"
        )

    with col3:
        st.metric(
            "Vid√©os",
            value=summary['recent_sum']['video_extractions'],
            delta=f"{summary['trends']['video_extractions']}%"
        )

    with col4:
        st.metric(
            "TTS",
            value=summary['recent_sum']['tts_generations'],
            delta=f"{summary['trends']['tts_generations']}%"
        )

    # Graphique d'activit√©
    st.subheader("üìà Tendances sur 30 jours")

    # Pr√©paration des donn√©es pour le graphique
    chart_data = usage_data.copy()
    chart_data['date'] = chart_data['date'].dt.strftime('%d/%m')

    # S√©lection des m√©triques √† afficher
    metrics_mapping = {
        'transcriptions': 'Transcriptions',
        'youtube_extractions': 'Extractions YouTube',
        'video_extractions': 'Extractions Vid√©o',
        'tts_generations': 'G√©n√©rations TTS'
    }

    chart_metrics = st.multiselect(
        "M√©triques √† afficher",
        options=list(metrics_mapping.keys()),
        default=['transcriptions'],
        format_func=lambda x: metrics_mapping[x]
    )

    # Si aucune m√©trique s√©lectionn√©e, afficher toutes
    if not chart_metrics:
        chart_metrics = list(metrics_mapping.keys())

    # Cr√©ation du graphique
    chart_df = pd.DataFrame({
        'date': chart_data['date']
    })

    for metric in chart_metrics:
        chart_df[metrics_mapping[metric]] = chart_data[metric]

    st.line_chart(chart_df.set_index('date'))

    # Activit√© r√©cente
    st.subheader("üìã Activit√© r√©cente")

    # Simulation d'activit√©s r√©centes (√©v√©nements fictifs)
    today = datetime.now()
    recent_activities = [
        {
            'time': (today - timedelta(minutes=15)).strftime('%H:%M'),
            'action': 'Transcription',
            'details': 'interview_mars2023.mp4',
            'user': 'admin'
        },
        {
            'time': (today - timedelta(hours=2)).strftime('%H:%M'),
            'action': 'Extraction YouTube',
            'details': 'https://youtube.com/watch?v=xXxXxXx',
            'user': 'user1'
        },
        {
            'time': (today - timedelta(hours=4)).strftime('%H:%M'),
            'action': 'Text-to-Speech',
            'details': 'G√©n√©ration de 345 mots',
            'user': 'admin'
        },
        {
            'time': (today - timedelta(hours=6)).strftime('%H:%M'),
            'action': 'Extraction vid√©o',
            'details': 'conference_avril2023.mp4',
            'user': 'user1'
        }
    ]

    # Affichage des activit√©s r√©centes
    activity_df = pd.DataFrame(recent_activities)
    st.dataframe(activity_df, use_container_width=True)

    # Statistiques globales
    st.subheader("üßÆ Statistiques globales")

    col1, col2 = st.columns(2)

    with col1:
        # Temps total de contenu trait√©
        total_content_hours = random.randint(8, 20)
        st.info(f"üíæ Contenu total trait√©: **{total_content_hours} heures**")

        # Taux de r√©ussite
        success_rate = random.randint(92, 99)
        st.success(f"‚úÖ Taux de r√©ussite des op√©rations: **{success_rate}%**")

    with col2:
        # √âconomies estim√©es
        saved_time = random.randint(15, 40)
        st.info(f"‚è±Ô∏è Temps √©conomis√© estim√©: **{saved_time} heures**")

        # Pr√©cision moyenne
        accuracy = random.randint(85, 95)
        st.success(f"üéØ Pr√©cision moyenne: **{accuracy}%**")

    # Aide rapide
    with st.expander("üí° D√©marrage rapide"):
        st.markdown("""
        ### Comment utiliser TranscriptFlow:

        1. **Extraction d'audio**: Utilisez l'onglet "Extraction" pour obtenir l'audio depuis YouTube ou un fichier vid√©o local
        2. **Transcription**: Convertissez l'audio en texte avec Whisper
        3. **Analyse**: G√©n√©rez des r√©sum√©s, mots-cl√©s ou posez des questions sur le contenu
        4. **Export**: T√©l√©chargez les r√©sultats au format texte

        Besoin d'aide suppl√©mentaire? Consultez la documentation compl√®te dans les param√®tres.
        """)